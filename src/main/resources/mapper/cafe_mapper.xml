<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="co.cod.app.cafe.mapper.CafeMapper" >
   <select id="getCafe" parameterType="String" resultType="co.cod.app.cafe.CafeVO">
         SELECT 
         DISTINCT C.*
         <if test="email != null and email != ''">
        ,(SELECT EMAIL FROM BOOKMARKS WHERE ADMIN_ID =C.ADMIN_ID  AND   EMAIL =#{email}) AS BOOKMARKS,       
         (SELECT BOOKMARK_SEQ FROM BOOKMARKS WHERE ADMIN_ID=C.ADMIN_ID AND EMAIL=#{email}) BOOKMARK_SEQ
          </if>
         FROM CAFE C 
         LEFT OUTER JOIN BOOKMARKS B ON (C.ADMIN_ID = B.ADMIN_ID)
         WHERE C.ADMIN_ID = #{adminId}
   </select>   
   
     <insert id="insertCafe" parameterType="co.cod.app.cafe.CafeVO">
        INSERT INTO CAFE (admin_id, cafe_name, cafe_address, cafe_phone,
         cafe_time, cafe_closeday, cafe_thumbnail, photo_group,
         cafe_hashtag, cafe_theme, cafe_ask_content, wifi,
         nokid, parking, animal, beam, charger, big_seat, lend, cafe_x, cafe_y,cafe_bn)
         VALUES(
            #{adminId}, #{cafeName}, #{cafeAddress},#{cafePhone},
            #{cafeTime},#{cafeCloseday},#{cafeThumbnail},#{photoGroup},
            #{cafeHashtag},#{cafeTheme},#{cafeAskContent},#{wifi},
            #{nokid},#{parking},#{animal},#{beam},#{charger},#{bigSeat},#{lend},#{cafeX},#{cafeY},#{cafeBn})
            
     </insert>
  
  <update id="updateCafe"  parameterType="co.cod.app.cafe.CafeVO">
        UPDATE CAFE
        <set>
        	 cafe_bn =#{cafeBn},
	         admin_id =#{adminId},
	         cafe_name =#{cafeName},
	         <if test = "cafeAddress != null and cafeAddress != ''">
	        	 cafe_address = #{cafeAddress},
	         </if>
	         cafe_phone = #{cafePhone},
	         cafe_time = #{cafeTime},
	         cafe_closeday = #{cafeCloseday},
             <if test = "photoGroup != null">
         	 	photo_group = #{photoGroup},
             </if>
	         <if test = "cafeThumbnail != null and cafeThumbnail != ''">
	         	cafe_thumbnail = #{cafeThumbnail},
	         </if>
	         cafe_hashtag = #{cafeHashtag},
	         cafe_theme = #{cafeTheme},
	         wifi = #{wifi},
	         nokid = #{nokid},
	         parking = #{parking},
	         animal = #{animal},
	         beam = #{beam},
	         charger = #{charger},
	         big_seat = #{bigSeat},
	         lend = #{lend}  
	         </set>
        WHERE
        ADMIN_ID = #{adminId}
  </update>

  
  <delete id="deleteCafe" parameterType="String">
     DELETE FROM CAFE WHERE
     ADMIN_ID =#{adminId}
  
  </delete>
     <!-- 테마리스트 -->
   <select id="getThemeList" resultType="co.cod.app.cafe.CafeVO" parameterType="co.cod.app.cafe.CafeVO">
        SELECT 
         C.ADMIN_ID, 
         C.CAFE_NAME, 
         C.CAFE_THUMBNAIL ,
         C.CAFE_HASHTAG, 
         NVL(R.STARS,0) AS      STARS
         <if test="email != null">
        ,  (SELECT EMAIL FROM BOOKMARKS WHERE ADMIN_ID =C.ADMIN_ID  AND   EMAIL =#{email}) AS BOOKMARKS,    
         (SELECT BOOKMARK_SEQ FROM BOOKMARKS WHERE ADMIN_ID=C.ADMIN_ID AND EMAIL=#{email}) BOOKMARK_SEQ
          </if>
      FROM CAFE C 
      LEFT OUTER JOIN (SELECT ADMIN_ID, TRUNC((SUM(STARS))/COUNT(STARS),1) STARS
                                  FROM REVIEW
                                  GROUP BY
                                   ADMIN_ID) R
                                  ON (C.ADMIN_ID = R.ADMIN_ID)
      JOIN admin a on(a.admin_id= c.admin_id)
     WHERE a.cafe_state=2                            
     <if test="cafeTheme != null">
        AND CAFE_THEME = #{cafeTheme}
     </if>
      ORDER BY CAFE_THEME DESC
   </select>
  
   <!-- 랜덤 리스트  -->
    <select id="getRandomList" resultType="co.cod.app.cafe.CafeVO" parameterType="co.cod.app.cafe.CafeVO">
    SELECT c.* FROM (SELECT * FROM CAFE ORDER BY DBMS_RANDOM.VALUE)c
      JOIN admin a on(a.admin_id= c.admin_id)
     WHERE <![CDATA[ROWNUM <= 10]]> 
       AND a.cafe_state = 2
   </select>
   
   
   <!-- 지역리스트 -->
   <select id="getAreaList" resultType="co.cod.app.cafe.CafeVO" parameterType="co.cod.app.cafe.CafeVO">
       SELECT C.ADMIN_ID, 
	          C.CAFE_NAME,
	          C.CAFE_ADDRESS, 
	          C.CAFE_THUMBNAIL ,
	          C.CAFE_HASHTAG, 
	          NVL(R.STARS,0) AS STARS 
	          <if test="email != null">
	          ,(SELECT EMAIL FROM BOOKMARKS WHERE ADMIN_ID =C.ADMIN_ID AND EMAIL = #{email} ) AS BOOKMARKS,   
	          (SELECT BOOKMARK_SEQ FROM BOOKMARKS WHERE ADMIN_ID=C.ADMIN_ID AND EMAIL= #{email}) BOOKMARK_SEQ
	          </if>
         FROM CAFE C LEFT OUTER JOIN (SELECT ADMIN_ID, TRUNC((SUM(STARS))/ COUNT(STARS),1) STARS
                                       FROM REVIEW
                                       GROUP BY ADMIN_ID) R  
           ON (C.ADMIN_ID = R.ADMIN_ID)
         JOIN admin a on(a.admin_id= c.admin_id)
        WHERE a.cafe_state=2
        <if test="cafeAddress != null">
            AND C.CAFE_ADDRESS LIKE '%'||#{cafeAddress}||'%'
        </if>
   </select>
   
   <select id="memberAreaList" resultType="co.cod.app.cafe.CafeVO">
      SELECT 
         C.ADMIN_ID, 
         C.CAFE_NAME, 
         C.CAFE_THUMBNAIL , 
         C.CAFE_HASHTAG,
         NVL(R.STARS,0) AS      STARS
      FROM CAFE C 
      LEFT OUTER JOIN (SELECT ADMIN_ID, TRUNC((SUM(STARS))/COUNT(STARS),1) STARS
                                  FROM REVIEW
                                  GROUP BY
                                   ADMIN_ID) R
                                  ON (C.ADMIN_ID = R.ADMIN_ID)
      join admin a on(a.admin_id= c.admin_id)
      where a.cafe_state=2
   </select>
   
   <select id="memberThemeList" resultType="co.cod.app.cafe.CafeVO">
    SELECT 
         C.ADMIN_ID, 
         C.CAFE_NAME, 
         C.CAFE_THUMBNAIL , 
         C.CAFE_HASHTAG,
         NVL(R.STARS,0) AS      STARS
      FROM CAFE C 
      LEFT OUTER JOIN (SELECT ADMIN_ID, TRUNC((SUM(STARS))/COUNT(STARS),1) STARS
                                  FROM REVIEW
                                  GROUP BY
                                   ADMIN_ID) R
                                  ON (C.ADMIN_ID = R.ADMIN_ID)
      JOIN admin a on(a.admin_id= c.admin_id)
      WHERE a.cafe_state=2      
      ORDER BY CAFE_THEME DESC
   </select>
   
   
   <select id="getLocation" resultType="co.cod.app.cafe.CafeVO">
    SELECT 
         cafe_x, 
         cafe_y
      FROM cafe
     WHERE admin_id = #{adminId}
   </select>
   <!-- 차트 -->
   <select id="getCafeMap" resultType="map" parameterType="co.cod.app.cafe.CafeVO">
     SELECT MENU_NAME "name",sum((price+price_add*order_state)*orderline_amount)"sum"
      FROM order_view
      WHERE admin_id =#{adminId}
      GROUP BY MENU_NAME
   </select>
   
 <!-- 월별 -->
	<select id="monthGetCafeMap" resultType="map" parameterType="co.cod.app.cafe.CafeVO">
     SELECT TO_CHAR(TRUNC(O.ORDER_TIME), 'MM') "TIME",
		SUM((M.PRICE + M.PRICE_ADD * OL.ORDER_STATE )*OL.ORDERLINE_AMOUNT) "PRICE"
		FROM ORDERS O, ORDERLINE OL, MENU M
		WHERE O.ORDER_SEQ = OL.ORDER_SEQ
		AND OL.MENU_SEQ = M.MENU_SEQ
		AND O.ADMIN_ID =#{adminId}
		GROUP BY TO_CHAR(TRUNC(O.ORDER_TIME), 'MM')
		ORDER BY 1 DESC
   </select>
   
  <!--  일별 -->
  <select id="dayGetCafeMap" resultType="map" parameterType="co.cod.app.cafe.CafeVO">
	SELECT TO_CHAR(trunc(order_time),'MM-dd') "TIME", sum((price+price_add*order_state)*orderline_amount) price
    	 FROM order_view
		 WHERE admin_id =#{adminId}
    	 GROUP BY TRUNC(ORDER_TIME)
		 ORDER BY 1 DESC
  </select>
   
   
   
   
   
   
   
   
   
   <!-- 카페 오픈상태 -->
   <select id="getCafeOpenClose" parameterType="String" resultType="Integer">
         SELECT open_close
         FROM cafe
         WHERE admin_id = #{adminId}
   </select>
   <update id="updateOpenClose" parameterType="co.cod.app.cafe.CafeVO">
        UPDATE CAFE
        SET
        open_close=#{openClose}
        WHERE
        ADMIN_ID = #{adminId}
     </update>
  
     <!-- 카페 등록 허용 날짜 업데이트 -->
     <update id="updateCafeSubmit" parameterType="String" >
      UPDATE CAFE SET CAFE_SUBMIT = SYSDATE WHERE ADMIN_ID = #{adminId} 
   </update>
   
   <!-- 카페 공지사항 -->
   <select id="adminNotice" resultType="co.cod.app.cafe.CafeVO">
   SELECT A.ADMIN_NOTICE_CONTENT, 
      B.ADMIN_NOTICE_TIME
	 FROM      ADMIN_NOTICE A 
     JOIN  
      (SELECT MAX(ADMIN_NOTICE_TIME) ADMIN_NOTICE_TIME 
          FROM ADMIN_NOTICE WHERE ADMIN_ID=#{adminId}) B 
      ON(A.ADMIN_NOTICE_TIME = B.ADMIN_NOTICE_TIME)
WHERE ADMIN_ID = #{adminId}
   </select>
  
  
   
</mapper>