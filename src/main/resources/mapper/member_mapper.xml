<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="co.cod.app.member.mapper.MemberMapper">

	<insert id="insertMember"
		parameterType="co.cod.app.member.MemberVO">
		INSERT INTO MEMBER (
			EMAIL, PW, BIRTHDAY, PHONE, NICKNAME
		)
		VALUES(
		#{email},
		#{pw},
		#{birthday},
		#{phone},
		#{nickname}
		)
	</insert>	
	
	<select id="getMember" parameterType="members" resultType="members">
		SELECT *
		  FROM member
		 WHERE email = #{email} 
	</select>

	<select id="getMemberList"
		resultType="co.cod.app.member.MemberVO">
		select * from member
	</select>
	
	<update id= "updateMember" parameterType="co.cod.app.member.MemberVO">
		 UPDATE MEMBER 
		 SET PW = #{pw}, 
		 PHONE = #{phone},
		 BIRTHDAY = #{birthday},
		 NICKNAME = #{nickname} 
		 WHERE EMAIL = #{email}
		
	</update>
	

	<select id="getBookmarks" parameterType="vofile.BookmarksVO"
		resultType="vofile.BookmarksVO">
		SELECT TQ.*, EMAIL, B.BOOKMARK_SEQ
		  FROM (SELECT C.ADMIN_ID, C.CAFE_NAME, C.CAFE_THUMBNAIL, C.CAFE_HASHTAG, S.STARS
				  FROM (SELECT ADMIN_ID, TRUNC(AVG(STARS),1) STARS
						  FROM REVIEW
					  	  GROUP BY ADMIN_ID)S , CAFE C
				 WHERE S.ADMIN_ID(+) = C.ADMIN_ID) TQ, BOOKMARKS B
		 WHERE B.ADMIN_ID = TQ.ADMIN_ID
		   AND B.EMAIL = #{email}
	</select>
 
	<select id="memberLogin"
		parameterType="co.cod.app.member.MemberVO"
		resultType="co.cod.app.member.MemberVO"> 
		SELECT
		EMAIL, PW
		FROM MEMBER
		WHERE EMAIL = #{email}
	</select>


	<!-- 나의 오더 결제 조회  -->
	<select id="getMyorderList" parameterType="co.cod.app.member.MemberVO" resultType="co.cod.app.member.MemberVO"> 
		SELECT O.ORDER_TIME , O.EMAIL, C.CAFE_NAME, M.PRICE
		FROM ORDERS O , CAFE C , MENU M 
		WHERE O.ADMIN_ID = C.ADMIN_ID 
		AND O.ADMIN_ID = M.ADMIN_ID			 
		ORDER BY ORDER_TIME DESC
	
	</select>
	
	<!-- 결제내역 상세 조회 (주문메뉴/수량/단가) -->
 	<select id="getMyMenuList" parameterType="co.cod.app.member.MemberVO" resultType="co.cod.app.member.MemberVO">
	
	SELECT M.MENU_NAME, M.PRICE, OL.ORDERLINE_AMOUNT, O.ORDER_TIME, O.EMAIL
	FROM MENU M, ORDERLINE OL, ORDERS O
	WHERE M.ADMIN_ID = O.ADMIN_ID
	AND OL.ORDER_SEQ = O.ORDER_SEQ
	
	
	</select> 


	<insert id="insertBookmark" parameterType="vofile.BookmarksVO">
		<selectKey resultType="int" keyProperty="bookmarkSeq" order="BEFORE">
			SELECT NVL(MAX(BOOKMARK_SEQ),0)+1 
			  FROM BOOKMARKS
		</selectKey>
		INSERT INTO BOOKMARKS(BOOKMARK_SEQ, EMAIL, ADMIN_ID)
		VALUES (#{bookmarkSeq}, #{email}, #{adminId})
	</insert>

	<delete id="deleteBookmark" parameterType="vofile.BookmarksVO">
		DELETE FROM BOOKMARKS
		WHERE BOOKMARK_SEQ=#{bookmarkSeq}
	</delete>


	<delete id="deleteMember" parameterType="String">
		
		DELETE FROM member
		WHERE email =#{email}
	
	</delete>

	<select id="getEmail" parameterType="co.cod.app.member.MemberVO">
	SELECT EMAIL 
	  FROM MEMBER 
	 WHERE EMAIL=#{email jdbcType=VARCHAR}
	</select>
	
	<select id="getPhone" parameterType="co.cod.app.member.MemberVO">
	SELECT PHONE 
	  FROM MEMBER 
	 WHERE  PHONE=#{phone}
	</select>
	
	<select id="getMemberDayOrder" resultType="vofile.GetMemberDayOrder">
	SELECT 
				
                TO_CHAR(O.ORDER_TIME, 'yyyy-MM-dd') "ORDER_TIME", 
                C.CAFE_NAME CAFE_NAME,
                SUM((M.PRICE + M.PRICE_ADD * OL.ORDER_STATE )*OL.ORDERLINE_AMOUNT) PRICE,
                min(o.order_seq) order_seq
     FROM ORDERS O   JOIN ORDERLINE OL           ON (O.ORDER_SEQ = OL.ORDER_SEQ)
                     JOIN MENU M                 ON (OL.MENU_SEQ = M.MENU_SEQ)
                     JOIN CAFE C                 ON (M.ADMIN_ID = C.ADMIN_ID)
    WHERE O.EMAIL = #{email}
    GROUP BY 
                TO_CHAR(O.ORDER_TIME, 'yyyy-MM-dd'), 
                C.CAFE_NAME
    ORDER BY 1 DESC
	</select>
	
	<select id="getMemberOrders" resultType="vofile.GetMemberDayOrder">
	SELECT 
			M.MENU_NAME, 
			OL.ORDER_STATE, 
			M.PRICE, 
			M.PRICE_ADD,
			OL.ORDERLINE_AMOUNT, 
			O.ORDER_TIME
	  FROM MENU M JOIN ORDERLINE OL ON (M.MENU_SEQ = OL.MENU_SEQ)
	            JOIN ORDERS O ON(O.ORDER_SEQ = OL.ORDER_SEQ)
	            JOIN CAFE C ON(C.ADMIN_ID = O.ADMIN_ID)
     WHERE O.EMAIL = #{email} AND 
     		TO_CHAR(ORDER_TIME, 'yyyy-MM-dd')=#{orderTime} AND
     		C.CAFE_NAME=#{cafeName}
	</select>
	
		<select id="getFiveDayOrder" resultType="vofile.GetMemberDayOrder">
    select * FROM
    	(SELECT 
				
                TO_CHAR(O.ORDER_TIME, 'yyyy-MM-dd') "ORDER_TIME", 
                C.CAFE_NAME CAFE_NAME,
                SUM((M.PRICE + M.PRICE_ADD * OL.ORDER_STATE )*OL.ORDERLINE_AMOUNT) PRICE
     FROM ORDERS O   JOIN ORDERLINE OL           ON (O.ORDER_SEQ = OL.ORDER_SEQ)
                     JOIN MENU M                 ON (OL.MENU_SEQ = M.MENU_SEQ)
                     JOIN CAFE C                 ON (M.ADMIN_ID = C.ADMIN_ID)
    WHERE O.EMAIL = #{email} 
    GROUP BY 
                TO_CHAR(O.ORDER_TIME, 'yyyy-MM-dd'), 
                C.CAFE_NAME
    ORDER BY 1 DESC)
   where  <![CDATA[ROWNUM <= 5]]> 
	</select>
	
	<select id="receiveMessage" resultType="vofile.MessageVO">
		SELECT * 
		  FROM BOOKMARKS
		 WHERE EMAIL=#{email}
	</select>
	
	<select id="getFiveBookmarks" resultType="vofile.GetMemberDayOrder">
	SELECT * FROM(
	 SELECT  
          C.CAFE_NAME,
         NVL( BOOKMARKNUM,0) BOOKMARKNUM
    FROM CAFE C JOIN  BOOKMARKS B ON(B.ADMIN_ID = C.ADMIN_ID)
                       LEFT OUTER JOIN (SELECT ADMIN_ID, COUNT(ORDER_SEQ) BOOKMARKNUM
                                                       FROM ORDERS
                                                      WHERE EMAIL=#{email}
                                                      GROUP BY ADMIN_ID ) O ON(C.ADMIN_ID = O.ADMIN_ID)
   WHERE B.EMAIL=#{email}
   )
   WHERE  <![CDATA[ROWNUM <= 5]]> 
	</select>
	
	<select id="getFiveReview" resultType="vofile.GetMemberDayOrder">
	 SELECT * FROM
	 (SELECT C.CAFE_NAME, R.REVIEW_TIME        
       FROM REVIEW R JOIN CAFE C ON (R.ADMIN_ID = C.ADMIN_ID)
       WHERE EMAIL=#{email}
       ORDER BY 2 DESC)
       WHERE  <![CDATA[ROWNUM <= 5]]> 
	</select>
	
	<select id="popularList" resultType="co.cod.app.member.MemberVO">
	select  p.cafe_name, 
                 c.cafe_thumbnail, 
                 c.cafe_hashtag,
                 c.admin_id,
                 (select nvl(trunc(avg(stars),1),0) stars from review where admin_id=c.admin_id) stars
                 <if test="email != null">
                 ,nvl((SELECT 1 FROM BOOKMARKS WHERE ADMIN_ID=C.ADMIN_ID AND EMAIL=#{email}),0) bookmarks
                 </if>
      from popularcafe_view p ,cafe c
     where p.cafe_name = c.cafe_name
	</select>
	
	<select id="newCafeList" resultType="co.cod.app.member.MemberVO">
	SELECT * FROM
	(SELECT C.*,
	 (select nvl(trunc(avg(stars),1),0) stars from review where admin_id=c.admin_id) stars
	 <if test="email != null">
                 ,nvl((SELECT 1 FROM BOOKMARKS WHERE ADMIN_ID=C.ADMIN_ID AND EMAIL=#{email}),0) bookmarks
     </if>
	FROM CAFE C
	ORDER BY CAFE_SUBMIT DESC)
	 where  <![CDATA[ROWNUM <= 5]]> 
	</select>
	
	<select id="location" resultType="co.cod.app.cafe.CafeVO">
	SELECT * FROM(  
   SELECT 
         C.ADMIN_ID, 
         C.CAFE_NAME, 
         C.CAFE_THUMBNAIL , 
         C.CAFE_X,
         C.CAFE_Y,
         NVL(R.STARS,0) AS		STARS       
         <if test="email != null">
  	    ,(SELECT EMAIL FROM BOOKMARKS WHERE ADMIN_ID =C.ADMIN_ID  AND	EMAIL =#{email}) AS BOOKMARKS,    
         (SELECT BOOKMARK_SEQ FROM BOOKMARKS WHERE ADMIN_ID=C.ADMIN_ID AND EMAIL=#{email}) BOOKMARK_SEQ
         </if>
   ,TRUNC(SQRT (POWER(69.1 * (to_number(cafe_y) - to_number(#{cafeY}) ), 2) +
	     POWER(69.1 * (to_number(#{cafeX}) -to_number(cafe_x)) * COS(to_number(#{cafeY}) / 57.3), 2)),2) AS distance
	     FROM cafe C LEFT OUTER JOIN (SELECT ADMIN_ID, TRUNC((SUM(STARS))/COUNT(STARS),1) STARS
                                                  FROM REVIEW
                                           GROUP BY	ADMIN_ID) R
                                      ON (C.ADMIN_ID = R.ADMIN_ID)
)WHERE <![CDATA[distance < 25]]>
ORDER BY DISTANCE
	</select>
	
	
	
</mapper>